const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api/auth';

async function testUnifiedAuthentication() {
  console.log('üß™ Test d\'authentification unifi√©e\n');

  try {
    // Test 1: Connexion admin
    console.log('1Ô∏è‚É£ Test de connexion admin...');
    const adminLoginResponse = await axios.post(`${BASE_URL}/login`, {
      email: 'admin@example.com',
      password: 'admin123'
    });

    console.log('‚úÖ Connexion admin r√©ussie !');
    console.log('   Token:', adminLoginResponse.data.token ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
    console.log('   Role:', adminLoginResponse.data.user.role);
    console.log('   Username:', adminLoginResponse.data.user.username);

    const adminToken = adminLoginResponse.data.token;

    // Test 2: Connexion client
    console.log('\n2Ô∏è‚É£ Test de connexion client...');
    const clientLoginResponse = await axios.post(`${BASE_URL}/login`, {
      email: 'client1@example.com',
      password: 'client123'
    });

    console.log('‚úÖ Connexion client r√©ussie !');
    console.log('   Token:', clientLoginResponse.data.token ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
    console.log('   Role:', clientLoginResponse.data.user.role);
    console.log('   Nom:', clientLoginResponse.data.user.nom);
    console.log('   Premi√®re connexion:', clientLoginResponse.data.needsPasswordChange ? 'Oui' : 'Non');

    const clientToken = clientLoginResponse.data.token;

    // Test 3: Changement de mot de passe client
    console.log('\n3Ô∏è‚É£ Test de changement de mot de passe client...');
    const changePasswordResponse = await axios.post(`${BASE_URL}/change-password`, {
      currentPassword: 'client123',
      newPassword: 'nouveauMotDePasse123'
    }, {
      headers: {
        'Authorization': `Bearer ${clientToken}`
      }
    });

    console.log('‚úÖ Mot de passe client chang√© avec succ√®s !');
    console.log('   Premi√®re connexion apr√®s changement:', changePasswordResponse.data.user.isFirstLogin ? 'Oui' : 'Non');

    // Test 4: Connexion avec le nouveau mot de passe
    console.log('\n4Ô∏è‚É£ Test de connexion avec le nouveau mot de passe...');
    const newClientLoginResponse = await axios.post(`${BASE_URL}/login`, {
      email: 'client1@example.com',
      password: 'nouveauMotDePasse123'
    });

    console.log('‚úÖ Connexion avec nouveau mot de passe r√©ussie !');
    console.log('   Premi√®re connexion:', newClientLoginResponse.data.needsPasswordChange ? 'Oui' : 'Non');

    // Test 5: V√©rification de session
    console.log('\n5Ô∏è‚É£ Test de v√©rification de session...');
    const sessionResponse = await axios.get(`${BASE_URL}/session`, {
      headers: {
        'Authorization': `Bearer ${newClientLoginResponse.data.token}`
      }
    });

    console.log('‚úÖ Session v√©rifi√©e !');
    console.log('   Authentifi√©:', sessionResponse.data.isAuthenticated ? 'Oui' : 'Non');
    console.log('   Role:', sessionResponse.data.user.role);

    // Test 6: Cr√©ation d'un nouveau client par admin
    console.log('\n6Ô∏è‚É£ Test de cr√©ation d\'un nouveau client par admin...');
    const createClientResponse = await axios.post(`${BASE_URL}/create-client`, {
      nom: 'Nouveau Client',
      email: 'nouveau@example.com',
      nomEntreprise: 'Nouvelle Entreprise',
      entrepriseId: 1
    }, {
      headers: {
        'Authorization': `Bearer ${adminToken}`
      }
    });

    console.log('‚úÖ Nouveau client cr√©√© avec succ√®s !');
    console.log('   Email:', createClientResponse.data.client.email);
    console.log('   Mot de passe par d√©faut:', createClientResponse.data.defaultPassword);

    // Test 7: Connexion du nouveau client
    console.log('\n7Ô∏è‚É£ Test de connexion du nouveau client...');
    const newClientLogin = await axios.post(`${BASE_URL}/login`, {
      email: 'nouveau@example.com',
      password: createClientResponse.data.defaultPassword
    });

    console.log('‚úÖ Connexion du nouveau client r√©ussie !');
    console.log('   Premi√®re connexion:', newClientLogin.data.needsPasswordChange ? 'Oui' : 'Non');

    // Test 8: R√©initialisation du mot de passe par admin
    console.log('\n8Ô∏è‚É£ Test de r√©initialisation du mot de passe par admin...');
    const resetPasswordResponse = await axios.post(`${BASE_URL}/admin/reset-client-password/2`, {}, {
      headers: {
        'Authorization': `Bearer ${adminToken}`
      }
    });

    console.log('‚úÖ Mot de passe client r√©initialis√© !');
    console.log('   Mot de passe par d√©faut:', resetPasswordResponse.data.defaultPassword);

    // Test 9: Connexion avec le mot de passe r√©initialis√©
    console.log('\n9Ô∏è‚É£ Test de connexion avec le mot de passe r√©initialis√©...');
    const resetLoginResponse = await axios.post(`${BASE_URL}/login`, {
      email: 'client2@example.com',
      password: resetPasswordResponse.data.defaultPassword
    });

    console.log('‚úÖ Connexion avec mot de passe r√©initialis√© r√©ussie !');
    console.log('   Premi√®re connexion:', resetLoginResponse.data.needsPasswordChange ? 'Oui' : 'Non');

    // Test 10: R√©cup√©ration du profil utilisateur
    console.log('\nüîü Test de r√©cup√©ration du profil utilisateur...');
    const profileResponse = await axios.get(`${BASE_URL}/profile`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`
      }
    });

    console.log('‚úÖ Profil utilisateur r√©cup√©r√© !');
    console.log('   Role:', profileResponse.data.user.role);
    console.log('   Email:', profileResponse.data.user.email);

    console.log('\nüéâ Tous les tests d\'authentification unifi√©e sont pass√©s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('üí° V√©rifiez que le serveur est d√©marr√© et que la base de donn√©es est initialis√©e');
    }
  }
}

// Test de performance
async function testPerformance() {
  console.log('\n‚ö° Test de performance...');
  
  const startTime = Date.now();
  
  try {
    // Test de connexion multiple
    const promises = [];
    for (let i = 0; i < 5; i++) {
      promises.push(
        axios.post(`${BASE_URL}/login`, {
          email: 'admin@example.com',
          password: 'admin123'
        })
      );
    }
    
    await Promise.all(promises);
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`‚úÖ Test de performance termin√© en ${duration}ms`);
    console.log(`   Moyenne: ${duration / 5}ms par requ√™te`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de performance:', error.message);
  }
}

// Ex√©cuter les tests
async function runTests() {
  await testUnifiedAuthentication();
  await testPerformance();
}

runTests(); 